{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UX/UI Audit Introduction Project Management tools usually are a sort of catch-22 situation. They are designed to help aid the project management process, but often end up increasing overheads With Sync, the goal was to design a tool that would help structure the project management process at the Marwadi group of companies better and work in a way that would consider its employees\u2019 mindsets and processes. Approach and Process We approached the audit differently than a standard UX audit. Besides just marking out issues and areas for potential issues, we\u2019ve also provided our thoughts on design and structure changes that would make the product experience much better. We broke the process into 2 phases; Discovery and Analysis. Phase 1 - Discovery Understanding Internal Processes and Users What are the type of projects that are taken up and that will be managed on this platform? Who are the users, what are their roles and how would they be using this platform? Are there any specific project management processes in place already, that need to be carried forward into the platform? We uncovered answers to this through discussions with Mr Jeet Marwadi. Sync - Questions Understanding the decisions taken in the new platform and the old platform We did a detailed analysis of the new platform to understand what design decisions were taken, and why they were taken. We also went through the older TASK and Sync tools that were being used to see how users were using them, and to understand design decisions that were taken in those. Sync - Specific Questions Analysing existing project management tools for reference We analysed several of the top project management tools like Asana, Trello, TeamWeek, Monday, Good Day, and others to see patterns and processes they\u2019re using, in case any of them could be relevant for Sync\u2019s use. Phase 2 - Analysis and Recommendations The analysis was done across different types of checks: Usability, Heuristic Principles, Copy and Content, and Overall Experience. For the overall experience, we approached the analysis from a user-centred point of view; by identifying the core actions/flows different users would take. This way, we could analyse if the core usage of the platform for different users would be optimal. With the suggestions for improving the tool\u2019s experience, we realised we had to take the implementation of fixes and suggestions into account as well. Since time and development constraints were to be taken into account here, we\u2019ve approach recommendations from a 2 level perspective. Level 1: Fixing Usability Issues, and basic UX improvement These are low-investment fixes that can be implemented fairly easily and quickly, that would improve the user experience to the extent that flows will be clear, nd the chances of any usage blocks or misunderstandings because of lack of clarity of the system would be minimised. Level 2: Improving UX Drastically These are bigger changes that would drastically change the way a user would interact with the system. These take the core user flows into account much more, and optimise for speed of usage, improved clarity and functionality. These might involve bigger changes to the product from a development point of view, hence we\u2019ve kept them separate. Analysis Considerations For the analysis, we balanced between 3 points of view - The project management process, the user\u2019s, and the UX best practices. This way, we were able to cover all bases and provide a full. Workflows and Management Processes at Marwadi Since the tool was being built specifically for use at the Marwadi group of companies, we wanted to understand if there were specific processes and methods used that we could then reflect accordingly in the tool. We got a rough idea of these through discussions with Mr Jeet Marwadi. However, we believe with more time, we could uncover more specifics, and help provide a more comprehensive, tailored solution. The points we uncovered were: Different ways of working at different companies Hierarchy Multiple task owners Number of parallel projects a user would be working on Number of people within a project Evolution of project over time: Tasks getting added, or even getting paused, on hold Primarily used on Desktop Different levels of users and their respective requirements Based on our discussions, we could identify 3 levels of employees who would use this system. Individual Team Members The primary role of these users are completing tasks within the various projects they are involved in. Their main goals through the platform would be to: See their tasks across projects and their importance/urgency See if they\u2019re running behind on any tasks and to alert the rest of the team if they are Send updates about tasks Mark if their tasks are dependent on someone else Mark when a task is completed Make changes in their task if required Create more specific tasks for themselves or for others in their team Know if there are any meetings coming up Remind themselves or others in the team about tasks or anything else related to projects Mid-Level Management These would primarily be project leads within companies, across single or multiple projects. Their main goals through the platform would be to: Create New Projects Create and assign Tasks to individual team members Monitor Project Progress regularly Be alerted if something is going off-track in a project Get updates about individual tasks if required Edit Tasks in case something changes Update Timelines in case something changes Check to make sure a task is completed satisfactorily Remind others about specific tasks or projects See how individual team members are performing Top-Level Management These would primarily be executives overseeing operations across single or multiple departments or companies. Their main goals through the platform would be to: See overview of project progress across all departments/companies Know if any project/task needs their attention Drill down to individual projects Ask for updates from Individuals/Mid-level Management regarding specific tasks or projects Remind others about specific tasks or projects See how individual team members and Mid-Level Management are performing UX Heuristics and Usability Principles These are established guidelines and principles that help define a good user experience. We modified and added points here based on our experience and requirements. These are defined as below: 1. Visibility of System Status Visibility of system status refers to how well the state of the system is conveyed to its users. Communicating the current state allows users to feel in control of the system, take appropriate actions to reach their goal, and ultimately trust the system. Ideally, systems should always keep users informed about what is going on, through appropriate feedback within reasonable time. Feedback: Whenever users interact with a system, they need to know whether the interaction was successful. Did the system actually catch that button press or was it busy with something else and it ignored it? Did the request go through? (One reason users have these questions is that they have been burned before by technology that didn\u2019t work properly. However, even when the happy day of bug-free technology arrives, people will still wonder if they really clicked or tapped correctly.) Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 2. Match between System and Real World or User\u2019s Mental Model The system should speak the users' language, with words, phrases and concepts familiar to the user, rather than system-oriented terms. Follow real-world conventions, making information appear in a natural and logical order. Example: If a website contains overly technical language and jargon, only a specialized IT professional would be able to understand. We should never assume that users will understand an abbreviation or acronym at first read. Lead with the full phrase, what it means, and why it matters before condensing it down to a shorter mnemonic Example: Users expect that UI elements which reflect material objects be similar to those objects from the real world. A compass app should function much like an actual compass does in real life. 3. User Control and Freedom Users should be able to navigate to all the parts of the system with ease and never get the feeling of being lost. Users often choose system functions by mistake and will need a clearly marked \"emergency exit\" to leave the unwanted state without having to go through an extended dialogue. A User may also need to undo and redo actions to recover from these mistakes. Example: Negative Actions should give users the freedom to undo any accidental actions. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 4. Consistency and Standards Users should not have to wonder whether different words, situations, or actions mean the same thing. Similarity helps users predict various outcomes of the system. The system should follow a consistent vocabulary and a design standard that are structured according to most users\u2019 mental model. Elements such as fonts, buttons, links, colours, font sizes, etc. should be consistent within the entire system. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 5. Error Prevention Good error messages help the user understand what went wrong and how it could be fixed. However, we should take steps to prevent the errors from occuring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to an action. Implement helpful constraints which could prevent the user from entering incorrect data into the system which would otherwise cause an error. Suggest actions and input elements wherever possible to guide users towards the correct use of an interface. Offer reasonable defaults that are likely to fit real-world goals. Automatically format user input to match system expectations wherever possible. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 6. Recognition rather than recall Minimize the user's memory load by making objects, actions, and options visible. The user should not have to remember information from one part of the dialogue to another. Instructions for use of the system should be visible or easily retrievable whenever appropriate. By making information and interface functions visible and easily accessible. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 7. Flexibility and Efficiency of Use Users need quick and efficient ways to speed up their interactions with the system. They should have easy access to functionality that they need the most. In some cases, users can even benefit from ambient information related to what action is being taken, helping them make quicker and better decisions. Flexible Shortcuts or Accelerators may often speed up the interaction for users such that the system can cater to both inexperienced and experienced users. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 8. Aesthetic and Minimalist Design Users can only process limited information at a time. Sometimes, the interface is too cluttered with too much information and a lack of hierarchy, making it difficult for the user to understand. The user should only see information that is relevant to the user. Removing content may seem like the best way out even though it is not always the right approach. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 9. Help users Recognize, Diagnose, and Recover from Errors Some errors can\u2019t be prevented, and when something does goes wrong, the user should be able to diagnose the problem and find a solution without leaving the system. Error messages should be expressed in plain language (no codes), precisely indicate the problem, and constructively suggest a solution. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 10. Help and Documentation Even though it is better if the system can be used without documentation, it may be necessary to provide help and documentation. Any such information should be easy to search, focused on the user's task, list concrete steps to be carried out, and not be too large. A user\u2019s perception and understanding of affordances might vary according to their ability, goals, beliefs, context and past experiences. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 11. Affordance Affordance refers to the actions a user perceives to be possible, distinct from those which are actually possible. Desired actions cannot be carried out if the object does not afford it, and afforded actions might not be carried out if the user does not perceive they are possible. In software interfaces managing affordances is critical, a user might perceive possible actions based on the properties of interface objects. Giving incorrect visual cues can ruin user experience and lead to frustration. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 12. Simplicity We want our products to have a level of complexity without being complex, and prioritize feature development over learning and the user experience. Information available to the user should be as simple as possible and task focused. Remove needless, risky and distracting features which don\u2019t add much value to the overall system. Identify user patterns and organize material around them. Frame your terms of reference. Don\u2019t force the user to learn something. Organize around patterns of use and not frequency. Look for behavior that signals a pattern. Experts will look for additional features, while mainstream audiences will need easy access to what they need. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 13. Structure Structure is concerned with how content is organized, how it\u2019s prioritized, how much of it. It also allows users to move through site content efficiently and effectively. A good structure should be something that's flexible, and can accommodate growth and adapt to change. There should be a focus on the relationships between content, which categories go together, and which don\u2019t, what are the sequence of steps that can fit together, how to move through the information, based on user needs and expectations. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 14. Accessibility Accessibility enables people with disabilities to perceive, understand, navigate, interact with, and contribute to the web. Color should not be used as the only visual means of conveying information. Ensure sufficient contrast between text and its background. Provide visual focus indicator for keyboard focus. Forms and input fields should always have labels and borders. Primary information should always be visible, secondary information should be shown on hover. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 15. Copy Issues Information displayed should be in a clear and simple language. Users should be able to understand the meaning of the information, else it is of no use. Only necessary and meaningful information needs to be displayed to the user. Avoid using redundant words and do not over-communicate information repeatedly. Avoid using technical jargon. Avoid negative words. Avoid uppercase text. Use Progressive Disclosure Approach where detailed information related to a message that the user may not want to see is hidden within a Show/Hide section. Place information where it belongs. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. Overall Analysis Overall, the features and design of the product have the right intentions and ideas behind them. It seems like some of them are either lacking in terms of implementation or haven\u2019t been thought through fully in terms of user flows. Some of the functionality also start off with the right direction, but all use cases haven\u2019t been accounted for fully or can be improved much more by tweaking the functionality. What needs work Approach more \u201cfunctionality-centric\u201d than \u201cuser-centric\u201d The screens and the formats are designed just accounting for the functionality, but not how the user may end up using it. For example, the WBS screen is a good feature from a functionality point of view, but when a user is on that screen, they would also want to click on the task there and see the details, which is missing. Similarly, having a \u201cTo-Do\u201d screen to show all the \u201cto-dos\u201d that user needs to do is filtered is a good feature, but the user would also want to see the context of the task that the to-do is within, which is missing. Need for better control over entities CRUD (Create, Read, Update, Delete) functionality for different entities is not clearly provided. For example, Tags can be added, but not deleted. And why can a user add only a single tag to a project? Along the same lines, a user can add project description while creating a project, but the description is not shown anywhere, except when they go to edit the description. Tweaking functions for better usage As mentioned earlier, some of the functionality added starts off on the right note, but needs to be considered more in terms of actual usage. For example, if there can be multiple people working on a task, why have only a single assignee? If a \u201cto-do\u201d screen is shown, why show them only the individual to-do items, as opposed to showing them tasks as well? Basic UX issues prevalent across all flows There are also a lot of heuristic, usability and content issues across screens, which we\u2019ve marked and suggested fixes for separately on BugHerd. You can see a summary of them here. What we liked Project Templates Project Templates are great for repeating event types where a user then doesn\u2019t have to fill standard actions and tasks each time. They\u2019re also a good way to act as guidelines for new employees to understand how to go about a certain project. Dependencies This creates a sense of accountability between users and lets them know if someone else is waiting on them to complete something. To-dos/Subtasks To-dos are helpful for bigger tasks that would benefit from breaking down into smaller pieces, so the progress on them can be tracked at a more granular level. It\u2019s also useful to be able to breakdown a task into smaller pieces where responsibility needs to be shared by multiple people. Due date for project based on tasks Having a bottom-top approach for planning helps, in the sense that deadlines can then be realistic based on the amount of time each task will take. However, we believe this should be an optional format, as in some cases, setting a due date first and then allotting time for tasks accordingly works better. Different views for different requirements The different views; timeline, milestone and WBS, serve different purposes, so it\u2019s good to let users switch between the views based on what view is best suited to their current requirement. Milestones + Kanban View Milestones help break-up the project into smaller, measurable goals, so is a huge plus. The Kanban view also is helpful to see tasks across a project overall and see progress on each task. Onboarding/Help While the format and content of the Help text needs work, having the option there is good, so users who aren\u2019t too familiar with the system can access and understand the system clearly. Simple design, not jarring While we wouldn\u2019t rate the UI design as something stellar, it is overall clean and simple. It allows for the user to use functions clearly without adding any confusion. Issues and Simple Enhancements Based on our analysis, we found a few areas which could improve the user experience by implementing simple enhancements to the existing system. General We found 16 issues which were common across all screens, which included missing hover effects, inconsistent colour usage, inconsistent spacing, visibility issues and more. The detailed bugs along with their screens have been marked on BugHerd. BugHerd - General Project Overview We found 35 issues across the Project Overview screen along with its different views and sections, these issues included missing tag information, hidden project information, missing or incorrect labels, incorrect structure, missing CRUD abilities, unnecessary views, inconsistent formatting and colour usage, visibility issues and more. The detailed bugs along with their screens have been marked on BugHerd. BugHerd - Project Overview Project Details We found 22 issues across the Project Details screen along with its different views and sections, these issues included missing project information, missing CRUD abilities, missing tag information, missing or incorrect labels, inconsistent formatting and colour usage, visibility issues and more. The detailed bugs along with their screens have been marked on BugHerd. BugHerd - Project Details Task Details We found 22 issues across the Task Details screen along with its different views and sections, these issues included missing task status information, missing dedicated controls to add a todo, reminders only being shown within a modal, task attachments being combined with discussion attachments, activity log and discussions shown within the same section, too much information shown together leading to clutter, missing or incorrect labels, inconsistent formatting, visibility issues and more. The detailed bugs along with their screens have been marked on BugHerd. BugHerd - Task Details Calendar We found 5 issues across the Calendar screen along with its different views and sections, these issues included the inablility to sort between events and tasks, inability to view past events and tasks, lack of significant difference between the representation of events and tasks. The detailed bugs along with their screens have been marked on BugHerd. BugHerd - Calendar Comprehensive Solution - The Vision for Sync Based on our analysis of the user flows, we arrived at a set of suggestions to improve the experience of the user in terms of Optimising Speed of use, Lowering Cognitive Load, Improving Accessibility, System Flexibility and Usability. Master Tasklist A normal user will typically have a bunch of different things they need to do each day: Tasks to complete, discussions to respond to, meetings to join, other team members requests to respond to and so on. All this right now is spread across different units - A To-do list, project details, notifications, etc. With so much to do already, why add to the user\u2019s cognitive load by having them have to track all these different requirements in different places? Instead, a single master tasklist would help streamline what they need to get done in a single screen. Master Tasklist This consolidates different sets of things: What the user themselves need to do Tasks / Subtasks to work on - across all projects they\u2019re involved in Accept/Reject Requests from Team members like extending due date extensions, changing assignees, etc. Viewing and responding to Reminders What's going on Upcoming Events Discussion Updates From here, they can either choose to click for a detailed view, or even take action on the item inline. Rename Milestones to Boards While we agree with the principle of having milestones to break down projects into smaller, achievable chunks, setting the format to \u201cMilestones\u201d by default might be restricting. Kanban boards in general can be used in different formats, as shown below Board 1 Board 2 Board 3 We foresee that the same could happen for projects within the Marwadi Companies as well. For example, For an event at Marwadi University, boards could be grouped by different types of activities; Competitions, Talks, Workshops, etc where progress for parts of each type of activity is tracked on their respective board. Hence, we suggest replacing \u201cMilestones\u201d with \u201cBoards\u201d to enable this flexibility. Along with this, there are a few other features that would help the functionality a lot. Boards Board Descriptions Optional ability to add descriptions for boards, so everyone in the project knows what each board is being used for. Ability to change Board and Task Positions Currently, boards are fixed to the position they were added in. Adding the ability to reorder boards within a project will help usage a lot. For example, if boards are being used as \u201cmilestones\u201d, the board for a milestone can be moved to the end so that it doesn\u2019t affect the space available. Or if a new \u201cmilestone\u201d needs to be added in between 2 existing ones, it will need to be placed as such there. Similarly, tasks could move from one milestone to another as well, hence we should include that option. Alternate Detailed View for Boards While Kanban has its benefits, it can also get quite crowded and cluttered, specially for bigger projects with lots of tasks and boards. It\u2019s also usually the case that a user is working on tasks on one particular board at a time; be it when they\u2019re using it as \u201cmilestones\u201d, or even categories of tasks. Hence, we think an alternate, zoomed in view of the kanban board would be very useful, where a user can see tasks in one board in detail, while still seeing an overview of other boards, and being able to switch between them easily. Detailed View for Boards This way, a user can only focus on the board that they are currently involved in, without distractions of other boards/tasks visible. This also gives us more space to put actions and options within task cards, to enable quicker actions. Project-Specific & Independent Entities Right now, entities like tasks and reminders are associated only with projects. However, it\u2019s not always that what a user might need to do would be related to a project. There are usually other tasks involved for day-to-day functions, which right now don\u2019t have a place to be entered. For this, we suggest letting the user create tasks or reminders that are not attached to any project. These would function exactly like tasks and reminders within projects would; having subtasks, assignees, discussions, etc. These can be viewed from the main dashboard, or from a separate \u201cMy Tasks\u201d or \u201cMy Reminders\u201d screen. Cross-Team Visibility and Accessibility The cornerstone of a good project management tool is also to facilitate collaboration between different team members. User should be able to assign tasks or subtasks to others, but to be able to do this well, they also need to be able to see what those users already have in their pipeline across other projects as well. We suggest having a screen where a user can view/search for other team members, and then see their task list across projects and across time. This way, if they\u2019re considering assigning a task to that user, they can evaluate this based on their available bandwidth. Flexible Subtasks We think the ability to add \u201cto-dos\u201d is useful; it helps break down the task into smaller, granular chunks. However, the current implementation is restrictive; only the assignee of a task can add to-dos, and they can only assign them to themselves. This is not optimal because: There may be subtasks that someone else needs to complete Subtasks could be added by a project lead, or another team member Subtasks For these reasons, it would be better to have subtasks open to be added, viewed by and assigned to other team members, instead of just the task Optimise for Multi-Tasking With a project management tool, there usually can be multiple things going on in parallel. Or the user may need access to a couple of things at the same time. For example, while responding to a project discussion, they may need to access a task that\u2019s being referred to in the discussion. To better enable this, we suggest adopting the following design patterns: Panels instead of modals Modals are a very useful design pattern in general; they give the ability to show details across a large chunk of the screen, while appearing quick (as opposed to opening on a new screen). However, they also block out the usage of the rest of the screen when they\u2019re open. For our use-case of tasks, content isn\u2019t too heavy, so using a lot of real estate across the screen isn\u2019t important. Enabling switching between tasks easily, being able to refer to other tasks at the same time would be a useful feature in this case though. For this reason, using a panel format for showing details would work much better, as shown below. Panels Minimizing Panels It\u2019s also likely that while a user is performing a certain action on the platform, they\u2019re interrupted and need to switch to something else temporarily. To do this, they\u2019ll currently either need to stop the action midway, losing what they had, or complete it and then get on to the next action. Having a minimise option on the panel will enable them to quickly switch between these tasks. Enable Quick Actions A good way for users to get comfortable with a system and enable them to use it even more efficiently is by providing ways for them to perform routine/repeat actions quickly. We see this all the time with good software development: All desktop softwares have keyboard shortcuts Mac OS has spotlight to enable quick searching of files, applications, or even terms on the internet Slack has text commands to add users, add reminders, etc. These greatly improve the efficiency of the user\u2019s workflow on the system. For Sync, we suggest: Universal Add Button Right now, if a user is to add a task, they need to first navigate into that project, go to that milestone, and then add the task from there. This works well when the project is in the initial stages of being created, but when tasks need to be added on later in the flow, it could get tedious. Similar with adding reminders or events; the current format forces the user to go into the relevant screen to add a new entry. A universal \u201cAdd\u201d button would streamline this flow, where the action to be done take priority, and the context to add it in is secondary. Animation of Add button interaction Add Button Contextual Actions Many actions that need to be taken would be reactionary actions; extending a due date that\u2019s getting delayed, reminding a user about a dependent task that\u2019s getting delayed, etc. These can be detected smartly by the system, and include a contextual action suggesting the next step right there. For Example, for a task with a delayed due date, there could be a \u201cRequest Extension\u201d action that appears right next to the information, so the user can easily send a request to the project lead. Contextual Actions Pinned Projects For a typical user, there may be upto 10 project they\u2019d be working on at a time. A higher-level management user may be involved in or overseeing many more, but there may be specific ones that they\u2019re more interested in. For these, a \u201cPin\u201d option can be enabled that would provide quick access to the project via the menu. Updates, tasks, etc of these would also be prioritised over those of other projects in their main dashboards. Adding Details while creating a Task Currently, a user can only add the name of the task while creating it. However, it\u2019s likely that things like due date and assignee will also be important to add while adding the task. Right now, adding these are extra clicks for the user. Instead, we should have the ability to add a due date and an assignee right when the task is being created. Bulk Actions Bulk Actions are useful on screens with multiple items, like tasks, reminders, etc. These would be useful to mark tasks as complete, copy, move or even delete them. Improved Accountability in Project Planning Accountability is key in the management of any project; be it on the system, or off. Here are our suggestions to improve accountability of projects on Sync. Planning Backwards Currently, due dates for projects and milestones are calculated based on task due dates. While this is good in the sense of taking a bottom-top approach, it reduces accountability as the due dates of the project then keep changing in case of tasks getting delayed, and hence there\u2019s no way to measure or alert if a particular project or milestone is getting delayed. Instead, we suggest letting users; perhaps just the project leader or higher level users, optionally set due dates at a project and milestone level. This way, if a task does get delayed, the system will be able to inform the relevant team members about how that delay will affect the overall milestone or project timeline. Showing \u201cDelayed by\u201d statuses for tasks and subtasks If a task is delayed, there should be an indication of it. Showing the number of days it\u2019s been delayed by also helps - it creates a sense of urgency to complete the task and, if there are others dependent on the task to be completed, lets them know how to plan accordingly. Confirmation by Project Leads for Certain Actions For Project Leads, keeping tabs of all updates on projects can get heavy. When tasks are marked as complete, or when task deadlines need to change, etc. there need to be checks in place to confirm them. For this, we suggest having a simple pipeline of confirmations of these for the Project Lead, or other relevant management-level users. These could come in in their main dashboard, or could even have project-specific views. Project Level Activity Log A log of all activity done by users across all entities in a project would be useful from a project post-mortem point of view, and to have a clear log of when tasks were completed, actions were taken, etc. Assigning Task Priorities Task priorities help when deciding between taking up urgent or important tasks. Important tasks always should be prioritised, and setting these priorities help decide that. This could also extend into tasks shown in a user\u2019s task masterlist, where important tasks to be completed get prioritised over others. Levels of Task Owners Based on our understanding of operations at Marwadi, and as per our own experience as well, there could be tasks which depend on more than one person. For this, we recommend following a similar pattern to what was followed in the older version of Sync, where a task could have multiple assignees. This can be improved by setting one of the assignees as a \u201cPrimary\u201d assignee, so the main responsibility of the task is on them, instead of diluting responsibility between all assignees. Projects - On Hold Status From our understanding, there could be projects that are temporarily put on hold due to various reasons. When this happens, the tasks from those shouldn\u2019t still come up in a user\u2019s tasklist or be alerted about them. There shouldn\u2019t also be confusion between different stakeholders about that the status of that project. For this, we suggest adding a \u201cOn Hold\u201d status that the project lead or a management-level user could enable for a project. This would hide that projects tasks, reminders, etc from other users\u2019 feeds, so as to keep the experience clutter free. Reports and Summaries For project leads and higher management members, getting an overall sense of projects and functioning is key. Daily or weekly reports could help give them a sense of progress and an insight into key information or anomalies. It could contain information like: tasks completed, tasks delayed, milestones achieved, etc. Insights and Forecasts One of the main benefits of having a digital system is being able to log and track data. This data can then be sliced and used in many interesting ways. This is something that will need more thought and consideration, but sharing some of our initial thoughts on this: Team Member Performance With historical information about which team members are completing tasks on time, are able to take on more tasks, etc, a profile can be created about their performance. Recurring Project Planning Insights For recurring projects like events at Marwadi University, the system could offer insights and suggestions based on past performance about how long certain milestones should be, etc. Forecasts Seeing how tasks are progressing could help provide a forecast of when the project would be completed realistically. Planning and resource allocation The system could check tasks allocated to a team member across other projects, and warn a project leader if that member\u2019s bandwidth is limited when assigning new tasks. Detailed Calendar View The current Calendar format is limited in terms of functionality, and in terms of usability.","title":"Audit Document"},{"location":"#uxui-audit","text":"","title":"UX/UI Audit"},{"location":"#introduction","text":"Project Management tools usually are a sort of catch-22 situation. They are designed to help aid the project management process, but often end up increasing overheads With Sync, the goal was to design a tool that would help structure the project management process at the Marwadi group of companies better and work in a way that would consider its employees\u2019 mindsets and processes.","title":"Introduction"},{"location":"#approach-and-process","text":"We approached the audit differently than a standard UX audit. Besides just marking out issues and areas for potential issues, we\u2019ve also provided our thoughts on design and structure changes that would make the product experience much better. We broke the process into 2 phases; Discovery and Analysis.","title":"Approach and Process"},{"location":"#analysis-considerations","text":"For the analysis, we balanced between 3 points of view - The project management process, the user\u2019s, and the UX best practices. This way, we were able to cover all bases and provide a full.","title":"Analysis Considerations"},{"location":"#ux-heuristics-and-usability-principles","text":"These are established guidelines and principles that help define a good user experience. We modified and added points here based on our experience and requirements. These are defined as below: 1. Visibility of System Status Visibility of system status refers to how well the state of the system is conveyed to its users. Communicating the current state allows users to feel in control of the system, take appropriate actions to reach their goal, and ultimately trust the system. Ideally, systems should always keep users informed about what is going on, through appropriate feedback within reasonable time. Feedback: Whenever users interact with a system, they need to know whether the interaction was successful. Did the system actually catch that button press or was it busy with something else and it ignored it? Did the request go through? (One reason users have these questions is that they have been burned before by technology that didn\u2019t work properly. However, even when the happy day of bug-free technology arrives, people will still wonder if they really clicked or tapped correctly.) Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 2. Match between System and Real World or User\u2019s Mental Model The system should speak the users' language, with words, phrases and concepts familiar to the user, rather than system-oriented terms. Follow real-world conventions, making information appear in a natural and logical order. Example: If a website contains overly technical language and jargon, only a specialized IT professional would be able to understand. We should never assume that users will understand an abbreviation or acronym at first read. Lead with the full phrase, what it means, and why it matters before condensing it down to a shorter mnemonic Example: Users expect that UI elements which reflect material objects be similar to those objects from the real world. A compass app should function much like an actual compass does in real life. 3. User Control and Freedom Users should be able to navigate to all the parts of the system with ease and never get the feeling of being lost. Users often choose system functions by mistake and will need a clearly marked \"emergency exit\" to leave the unwanted state without having to go through an extended dialogue. A User may also need to undo and redo actions to recover from these mistakes. Example: Negative Actions should give users the freedom to undo any accidental actions. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 4. Consistency and Standards Users should not have to wonder whether different words, situations, or actions mean the same thing. Similarity helps users predict various outcomes of the system. The system should follow a consistent vocabulary and a design standard that are structured according to most users\u2019 mental model. Elements such as fonts, buttons, links, colours, font sizes, etc. should be consistent within the entire system. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 5. Error Prevention Good error messages help the user understand what went wrong and how it could be fixed. However, we should take steps to prevent the errors from occuring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to an action. Implement helpful constraints which could prevent the user from entering incorrect data into the system which would otherwise cause an error. Suggest actions and input elements wherever possible to guide users towards the correct use of an interface. Offer reasonable defaults that are likely to fit real-world goals. Automatically format user input to match system expectations wherever possible. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 6. Recognition rather than recall Minimize the user's memory load by making objects, actions, and options visible. The user should not have to remember information from one part of the dialogue to another. Instructions for use of the system should be visible or easily retrievable whenever appropriate. By making information and interface functions visible and easily accessible. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 7. Flexibility and Efficiency of Use Users need quick and efficient ways to speed up their interactions with the system. They should have easy access to functionality that they need the most. In some cases, users can even benefit from ambient information related to what action is being taken, helping them make quicker and better decisions. Flexible Shortcuts or Accelerators may often speed up the interaction for users such that the system can cater to both inexperienced and experienced users. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 8. Aesthetic and Minimalist Design Users can only process limited information at a time. Sometimes, the interface is too cluttered with too much information and a lack of hierarchy, making it difficult for the user to understand. The user should only see information that is relevant to the user. Removing content may seem like the best way out even though it is not always the right approach. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 9. Help users Recognize, Diagnose, and Recover from Errors Some errors can\u2019t be prevented, and when something does goes wrong, the user should be able to diagnose the problem and find a solution without leaving the system. Error messages should be expressed in plain language (no codes), precisely indicate the problem, and constructively suggest a solution. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 10. Help and Documentation Even though it is better if the system can be used without documentation, it may be necessary to provide help and documentation. Any such information should be easy to search, focused on the user's task, list concrete steps to be carried out, and not be too large. A user\u2019s perception and understanding of affordances might vary according to their ability, goals, beliefs, context and past experiences. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 11. Affordance Affordance refers to the actions a user perceives to be possible, distinct from those which are actually possible. Desired actions cannot be carried out if the object does not afford it, and afforded actions might not be carried out if the user does not perceive they are possible. In software interfaces managing affordances is critical, a user might perceive possible actions based on the properties of interface objects. Giving incorrect visual cues can ruin user experience and lead to frustration. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 12. Simplicity We want our products to have a level of complexity without being complex, and prioritize feature development over learning and the user experience. Information available to the user should be as simple as possible and task focused. Remove needless, risky and distracting features which don\u2019t add much value to the overall system. Identify user patterns and organize material around them. Frame your terms of reference. Don\u2019t force the user to learn something. Organize around patterns of use and not frequency. Look for behavior that signals a pattern. Experts will look for additional features, while mainstream audiences will need easy access to what they need. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 13. Structure Structure is concerned with how content is organized, how it\u2019s prioritized, how much of it. It also allows users to move through site content efficiently and effectively. A good structure should be something that's flexible, and can accommodate growth and adapt to change. There should be a focus on the relationships between content, which categories go together, and which don\u2019t, what are the sequence of steps that can fit together, how to move through the information, based on user needs and expectations. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 14. Accessibility Accessibility enables people with disabilities to perceive, understand, navigate, interact with, and contribute to the web. Color should not be used as the only visual means of conveying information. Ensure sufficient contrast between text and its background. Provide visual focus indicator for keyboard focus. Forms and input fields should always have labels and borders. Primary information should always be visible, secondary information should be shown on hover. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page. 15. Copy Issues Information displayed should be in a clear and simple language. Users should be able to understand the meaning of the information, else it is of no use. Only necessary and meaningful information needs to be displayed to the user. Avoid using redundant words and do not over-communicate information repeatedly. Avoid using technical jargon. Avoid negative words. Avoid uppercase text. Use Progressive Disclosure Approach where detailed information related to a message that the user may not want to see is hidden within a Show/Hide section. Place information where it belongs. Example: In the current implementation of Sync, some elements do not have any hover effects, this makes it difficult for the user to understand if an element is clickable or not. Example: If a user is uploading a file, the system should provide some kind of status or progress bar to let the user know if he/she needs to wait or continue to the next page.","title":"UX Heuristics and Usability Principles"},{"location":"#overall-analysis","text":"Overall, the features and design of the product have the right intentions and ideas behind them. It seems like some of them are either lacking in terms of implementation or haven\u2019t been thought through fully in terms of user flows. Some of the functionality also start off with the right direction, but all use cases haven\u2019t been accounted for fully or can be improved much more by tweaking the functionality.","title":"Overall Analysis"},{"location":"#what-needs-work","text":"Approach more \u201cfunctionality-centric\u201d than \u201cuser-centric\u201d The screens and the formats are designed just accounting for the functionality, but not how the user may end up using it. For example, the WBS screen is a good feature from a functionality point of view, but when a user is on that screen, they would also want to click on the task there and see the details, which is missing. Similarly, having a \u201cTo-Do\u201d screen to show all the \u201cto-dos\u201d that user needs to do is filtered is a good feature, but the user would also want to see the context of the task that the to-do is within, which is missing. Need for better control over entities CRUD (Create, Read, Update, Delete) functionality for different entities is not clearly provided. For example, Tags can be added, but not deleted. And why can a user add only a single tag to a project? Along the same lines, a user can add project description while creating a project, but the description is not shown anywhere, except when they go to edit the description. Tweaking functions for better usage As mentioned earlier, some of the functionality added starts off on the right note, but needs to be considered more in terms of actual usage. For example, if there can be multiple people working on a task, why have only a single assignee? If a \u201cto-do\u201d screen is shown, why show them only the individual to-do items, as opposed to showing them tasks as well? Basic UX issues prevalent across all flows There are also a lot of heuristic, usability and content issues across screens, which we\u2019ve marked and suggested fixes for separately on BugHerd. You can see a summary of them here.","title":"What needs work"},{"location":"#what-we-liked","text":"Project Templates Project Templates are great for repeating event types where a user then doesn\u2019t have to fill standard actions and tasks each time. They\u2019re also a good way to act as guidelines for new employees to understand how to go about a certain project. Dependencies This creates a sense of accountability between users and lets them know if someone else is waiting on them to complete something. To-dos/Subtasks To-dos are helpful for bigger tasks that would benefit from breaking down into smaller pieces, so the progress on them can be tracked at a more granular level. It\u2019s also useful to be able to breakdown a task into smaller pieces where responsibility needs to be shared by multiple people. Due date for project based on tasks Having a bottom-top approach for planning helps, in the sense that deadlines can then be realistic based on the amount of time each task will take. However, we believe this should be an optional format, as in some cases, setting a due date first and then allotting time for tasks accordingly works better. Different views for different requirements The different views; timeline, milestone and WBS, serve different purposes, so it\u2019s good to let users switch between the views based on what view is best suited to their current requirement. Milestones + Kanban View Milestones help break-up the project into smaller, measurable goals, so is a huge plus. The Kanban view also is helpful to see tasks across a project overall and see progress on each task. Onboarding/Help While the format and content of the Help text needs work, having the option there is good, so users who aren\u2019t too familiar with the system can access and understand the system clearly. Simple design, not jarring While we wouldn\u2019t rate the UI design as something stellar, it is overall clean and simple. It allows for the user to use functions clearly without adding any confusion.","title":"What we liked"},{"location":"#issues-and-simple-enhancements","text":"Based on our analysis, we found a few areas which could improve the user experience by implementing simple enhancements to the existing system.","title":"Issues and Simple Enhancements"},{"location":"#comprehensive-solution-the-vision-for-sync","text":"Based on our analysis of the user flows, we arrived at a set of suggestions to improve the experience of the user in terms of Optimising Speed of use, Lowering Cognitive Load, Improving Accessibility, System Flexibility and Usability.","title":"Comprehensive Solution - The Vision for Sync"}]}